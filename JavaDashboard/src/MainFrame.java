
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Margaret
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.JPanel background = new javax.swing.JPanel();
        javax.swing.JLabel title = new javax.swing.JLabel();
        javax.swing.JPanel entryContainer = new javax.swing.JPanel();
        javax.swing.JLabel courseTitle = new javax.swing.JLabel();
        tfcourse = new javax.swing.JTextField();
        javax.swing.JLabel pointsTitle = new javax.swing.JLabel();
        tfpoints = new javax.swing.JTextField();
        javax.swing.JLabel gradeTitle = new javax.swing.JLabel();
        tfgrade = new javax.swing.JTextField();
        javax.swing.JButton add = new javax.swing.JButton();
        javax.swing.JButton clear = new javax.swing.JButton();
        javax.swing.JButton calculate = new javax.swing.JButton();
        javax.swing.JPanel tableContainer = new javax.swing.JPanel();
        javax.swing.JButton btnDelete = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        javax.swing.JButton clearTable = new javax.swing.JButton();
        javax.swing.JButton btnHelp = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        background.setBackground(new java.awt.Color(255, 255, 255));
        background.setOpaque(false);

        title.setFont(new java.awt.Font("MV Boli", 1, 14)); // NOI18N
        title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        title.setIcon(new javax.swing.ImageIcon(getClass().getResource("/calculator.png"))); // NOI18N
        title.setText("GPA Calculator");
        title.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(51, 153, 0)));

        entryContainer.setOpaque(false);

        courseTitle.setText("Course:");

        tfcourse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfcourseActionPerformed(evt);
            }
        });

        pointsTitle.setText("Points:");

        tfpoints.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfpointsActionPerformed(evt);
            }
        });

        gradeTitle.setText("Grade:");

        add.setBackground(new java.awt.Color(242, 242, 242));
        add.setIcon(new javax.swing.ImageIcon(getClass().getResource("/plus.png"))); // NOI18N
        add.setBorder(null);
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        clear.setBackground(new java.awt.Color(242, 242, 242));
        clear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/eraser (1).png"))); // NOI18N
        clear.setBorder(null);
        clear.setOpaque(true);
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });

        calculate.setBackground(new java.awt.Color(242, 242, 242));
        calculate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/calculator (1).png"))); // NOI18N
        calculate.setBorder(null);
        calculate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout entryContainerLayout = new javax.swing.GroupLayout(entryContainer);
        entryContainer.setLayout(entryContainerLayout);
        entryContainerLayout.setHorizontalGroup(
            entryContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(entryContainerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(entryContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(courseTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(entryContainerLayout.createSequentialGroup()
                        .addGroup(entryContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(entryContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(tfcourse)
                                .addComponent(tfpoints, javax.swing.GroupLayout.DEFAULT_SIZE, 301, Short.MAX_VALUE)
                                .addComponent(gradeTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(pointsTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(tfgrade, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 8, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(entryContainerLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(add)
                .addGap(72, 72, 72)
                .addComponent(clear)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(calculate)
                .addGap(58, 58, 58))
        );
        entryContainerLayout.setVerticalGroup(
            entryContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(entryContainerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(courseTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfcourse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pointsTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfpoints, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(gradeTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfgrade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(entryContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(add)
                    .addComponent(calculate)
                    .addComponent(clear))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tableContainer.setBackground(new java.awt.Color(204, 255, 204));
        tableContainer.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnDelete.setBackground(new java.awt.Color(204, 255, 204));
        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/delete.png"))); // NOI18N
        btnDelete.setBorder(null);
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Course ", "Points", "Grade"
            }
        ));
        jScrollPane1.setViewportView(table);

        clearTable.setBackground(new java.awt.Color(204, 255, 204));
        clearTable.setIcon(new javax.swing.ImageIcon(getClass().getResource("/clear.png"))); // NOI18N
        clearTable.setBorder(null);
        clearTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearTableActionPerformed(evt);
            }
        });

        btnHelp.setBackground(new java.awt.Color(204, 255, 204));
        btnHelp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ask.png"))); // NOI18N
        btnHelp.setBorder(null);
        btnHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHelpActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout tableContainerLayout = new javax.swing.GroupLayout(tableContainer);
        tableContainer.setLayout(tableContainerLayout);
        tableContainerLayout.setHorizontalGroup(
            tableContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tableContainerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tableContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 505, Short.MAX_VALUE)
                    .addGroup(tableContainerLayout.createSequentialGroup()
                        .addComponent(btnDelete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clearTable)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnHelp)))
                .addContainerGap())
        );
        tableContainerLayout.setVerticalGroup(
            tableContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tableContainerLayout.createSequentialGroup()
                .addGroup(tableContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnDelete)
                    .addComponent(clearTable)
                    .addComponent(btnHelp, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(12, 12, 12)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 389, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        textArea.setEditable(false);
        textArea.setColumns(20);
        textArea.setRows(5);
        jScrollPane2.setViewportView(textArea);

        javax.swing.GroupLayout backgroundLayout = new javax.swing.GroupLayout(background);
        background.setLayout(backgroundLayout);
        backgroundLayout.setHorizontalGroup(
            backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backgroundLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(backgroundLayout.createSequentialGroup()
                        .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(entryContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tableContainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(title, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        backgroundLayout.setVerticalGroup(
            backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backgroundLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(title)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(backgroundLayout.createSequentialGroup()
                        .addGap(0, 14, Short.MAX_VALUE)
                        .addComponent(tableContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(backgroundLayout.createSequentialGroup()
                        .addComponent(entryContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(background, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(background, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tfcourseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfcourseActionPerformed
        
    }//GEN-LAST:event_tfcourseActionPerformed

    private void tfpointsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfpointsActionPerformed
        
    }//GEN-LAST:event_tfpointsActionPerformed

    /**
     * Clears all the text fields
     * @param evt 
     */
    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
        clearTextField();
    }//GEN-LAST:event_clearActionPerformed

    /**
     * Adds a row
     * @param evt 
     */
    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        String course = tfcourse.getText();
        String grade = tfgrade.getText();
        String points = tfpoints.getText();
        
        if(course.isEmpty() || grade.isEmpty() || points.isEmpty()){
            JOptionPane.showMessageDialog(this,
                    "Please enter all fields", 
                    "Try again",
                   JOptionPane.ERROR_MESSAGE);
        }else if(!isNumeric(points)){
            JOptionPane.showMessageDialog(this,
                    "Please enter a number", 
                    "Enter number",
                   JOptionPane.ERROR_MESSAGE);
        }else if(getGrade(grade) > 9 || getGrade(grade) < 0){
            JOptionPane.showMessageDialog(this,
                    "Not a valid grade",
                    "Invalid Grade",
                    JOptionPane.ERROR_MESSAGE);
        }else{
            int g = getGrade(grade);
            courses.put(course, new Course(course, Integer.parseInt(points), g));
            DefaultTableModel model = (DefaultTableModel) table.getModel();
            model.addRow(new Object[]{course, points, getKey(g)+"("+g+")"});
        }
        
        clearTextField();
    }//GEN-LAST:event_addActionPerformed

    /**
     * Calculates the GPA based on the grades
     * @param evt 
     */
    private void calculateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calculateActionPerformed
        if(courses.isEmpty()){
            JOptionPane.showMessageDialog(this,
                    "No data yet",
                    "No data",
                    JOptionPane.ERROR_MESSAGE);
        }else{
            double totalPoints = courses.entrySet().stream()
                    .map(e -> e.getValue().p())
                    .reduce(0, (p1,p2) -> p1+p2);
            double avg = courses.entrySet().stream()
                    .map(e -> e.getValue().g()*e.getValue().p())
                    .reduce(0, (g1, g2) -> g1+g2)/totalPoints;

            //put the text in the textarea
            String text = "Summary\n\n Total Courses: " + courses.size() + "\n Total Points: " + totalPoints + "\n Your GPA: " + avg;
            textArea.setText(text);
        }
    }//GEN-LAST:event_calculateActionPerformed

    /**
     * Deletes a row
     * @param evt 
     */
    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int r = table.getSelectedRow();
        
        if(r < 0){
            JOptionPane.showMessageDialog(this,
                    "No row is selected",
                    "Selected row",
                    JOptionPane.ERROR_MESSAGE);
        }else{
            //get details of row and then remove it
            courses.remove((String)table.getValueAt(r, 0));
            DefaultTableModel model = (DefaultTableModel) table.getModel();
            model.removeRow(r);
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    /**
     * Saves the data in the table into a file
     * @param evt 
     */
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        Vector<Vector> tableData = model.getDataVector();
        
        //Saving of object in file
        try{
            FileOutputStream file = new FileOutputStream("file.bin");
            ObjectOutputStream output = new ObjectOutputStream(file);
            
            output.writeObject(tableData);
            output.close();
            file.close();
        }catch(Exception ex){
            ex.printStackTrace();
        }
    }//GEN-LAST:event_formWindowClosing

    /**
     * Clears the whole table
     * @param evt 
     */
    private void clearTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearTableActionPerformed
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.setRowCount(0);
        courses.clear();
    }//GEN-LAST:event_clearTableActionPerformed

    /**
     * When window is opened reads data from file and puts it on the table
     * @param evt 
     */
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        courses.clear();
        try{
            FileInputStream file = new FileInputStream("file.bin");
            ObjectInputStream input = new ObjectInputStream(file);
            Vector<Vector> tableData = (Vector<Vector>)input.readObject();
            
            input.close();
            file.close();
            
            DefaultTableModel model = (DefaultTableModel) table.getModel();
            for(int i = 0; i < tableData.size(); i++){
                Vector row = tableData.get(i);
                courses.put((String)row.get(0), new Course((String)row.get(0), Integer.parseInt((String)row.get(1)), Integer.parseInt(((String)row.get(2)).replaceAll("[^0-9]", ""))));
                model.addRow(new Object[]{row.get(0), row.get(1), row.get(2)});
            }
        }catch(Exception ex){
            ex.printStackTrace();
        }
    }//GEN-LAST:event_formWindowOpened

    /**
     * Help button if the user gets stuck
     * @param evt 
     */
    private void btnHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHelpActionPerformed
        // TODO add your handling code here:
        String text = """
                      Instructions:
                      1. Enter the course, number of Points the course is worth and your overall grade in the text fields on the left hand side 
                      2. Press the plus sign on the very left to add to the table
                      3. Repeat and until all grades are entered
                      4. Press the calculator to get the summary which will show on the bottom left
                      
                      Buttons:
                      - Plus -> Add to table
                      - Eraser -> Clear all text fields
                      - Calculator -> Calculate GPA
                      - Rubbish Bin -> Delete row
                      - Table with Eraser -> Clear Table
                      """;
        JOptionPane.showMessageDialog(this,
                    text,
                    "Help",
                    JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnHelpActionPerformed
    
    /**
     * Gets the key from the value
     * @param g The value grade to gets the string version eg. A+, A- etc.
     * @return returns String version of the grade
     */
    public static String getKey(int g)
    {
        return grades.entrySet().stream()
                .filter(entry -> entry.getValue() == g)
                .findFirst().map(Map.Entry::getKey)
                .orElse(null);
    }
    
    /**
     * Clears the text fields
     */
    private void clearTextField(){
        tfcourse.setText("");
        tfpoints.setText("");
        tfgrade.setText("");
    }
    
    /**
     * Gets the value of the grade
     * @param s The grade in String form
     * @return Int version of grade
     */
    private int getGrade(String s){
        String k = s.toUpperCase().trim();
        if(!isNumeric(s)){
            //check if map contains it
            if(grades.containsKey(k)){
                return grades.get(k);
            }else{
                //if it does not throw error message
                JOptionPane.showMessageDialog(this,
                    "Not a valid grade",
                    "Invalid Grade",
                    JOptionPane.ERROR_MESSAGE);
            }
        }
        return Integer.parseInt(s);
    }
    
    /**
     * Checks if string can be converted into a integer
     * @param strNum The string to check if can be turned into an integer
     * @return true if can be turned into int otherwise false
     */
    private boolean isNumeric(String strNum) {
    if (strNum == null) {
        return false;
    }
    try {
        int i = Integer.parseInt(strNum);
    } catch (NumberFormatException nfe) {
        return false;
    }
    return true;
}
    /**
     * Fills the grades map of all possible grades
     */
    public static void fillGrades(){
        grades.put("A+", 9);
	grades.put("A", 8);
	grades.put("A-", 7);
	grades.put("B+", 6);
	grades.put("B", 5);
	grades.put("B-", 4);
	grades.put("C+", 3);
	grades.put("C", 2);
	grades.put("C-", 1);
	grades.put("D", 0);
	grades.put("E", 0);
	grades.put("K", 0);
	grades.put("L", 0);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                fillGrades();
                new MainFrame().setVisible(true);
            }
        });
    }

    private Map<String, Course> courses = new HashMap<>();
    private static final Map<String, Integer> grades = new HashMap<>();
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable table;
    private javax.swing.JTextArea textArea;
    private javax.swing.JTextField tfcourse;
    private javax.swing.JTextField tfgrade;
    private javax.swing.JTextField tfpoints;
    // End of variables declaration//GEN-END:variables
}

record Course(String c, int p, int g){}